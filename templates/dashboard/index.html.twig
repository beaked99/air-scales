{# templates/dashboard/index.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Dashboard{% endblock %}

{% block body %}
<div class="min-h-screen bg-gray-900 text-gray-100 p-6">
  <h1 class="text-2xl font-bold text-green-400 mb-6">Air Scales Dashboard</h1>

  <!-- Status Bar -->
  <div id="status-bar" class="bg-gray-700 p-3 rounded mb-6">
    <span id="status-text">Loading...</span>
  </div>

  <!-- Live Sensor Data -->
  <div class="bg-gray-800 rounded-lg overflow-hidden mb-8">
    <table id="sensor-table" class="w-full text-sm">
      <thead class="bg-gray-700">
        <tr>
          <th class="p-3 text-left text-gray-200">Device</th>
          <th class="p-3 text-right text-gray-200">Weight (lbs)</th>
          <th class="p-3 text-right text-gray-200">Pressure (psi)</th>
          <th class="p-3 text-right text-gray-200">Temp (°F)</th>
          <th class="p-3 text-left text-gray-200">Status</th>
        </tr>
      </thead>
      <tbody id="sensor-data">
        <tr>
          <td colspan="5" class="p-6 text-center text-gray-400">📡 Connecting to devices...</td>
        </tr>
      </tbody>
      <tfoot class="bg-gray-700">
        <tr>
          <td class="p-3 font-bold text-gray-100">TOTAL</td>
          <td id="total-weight" class="p-3 text-right font-bold text-green-400">0.0 lbs</td>
          <td colspan="3" class="p-3 text-gray-400">
            <span id="device-count">0</span> devices
          </td>
        </tr>
      </tfoot>
    </table>
  </div>

  <!-- Connected Devices from Database -->
  <div class="mb-8">
    <h2 class="text-xl font-semibold text-white mb-4">Your Devices</h2>
    {% if devices is not empty %}
      <div class="bg-gray-800 rounded-lg divide-y divide-gray-700">
        {% for device in devices %}
          <div class="flex items-center justify-between p-4">
            <div class="flex-1">
              <div class="flex items-center space-x-4">
                <div>
                  <span class="text-gray-100 font-medium">{{ device.serialNumber ?: 'Device #' ~ device.id }}</span>
                  <span class="text-sm text-gray-400 ml-2">({{ device.deviceType ?: 'Unknown Type' }})</span>
                </div>
                <div class="text-sm text-gray-300">
                  {% if device.vehicle %}
                    <span class="text-blue-400">{{ device.vehicle }}</span>
                  {% else %}
                    <span class="text-yellow-400">Unassigned</span>
                  {% endif %}
                </div>
              </div>
              <div class="text-xs text-gray-500 mt-1">
                MAC: {{ device.macAddress ?: 'N/A' }} | 
                Firmware: {{ device.firmwareVersion ?: 'Unknown' }}
                {% set hasAccess = false %}
                {% for access in accessRecords %}
                  {% if access.device.id == device.id %}
                    | <span class="text-green-400">Connected via ESP32</span>
                    {% set hasAccess = true %}
                  {% endif %}
                {% endfor %}
                {% if device.soldTo == app.user and not hasAccess %}
                  | <span class="text-blue-400">Purchased</span>
                {% endif %}
              </div>
            </div>
            <div class="flex space-x-2">
              {% if not device.vehicle %}
                <a href="{{ path('device_configure', { id: device.id }) }}" 
                   class="text-sm text-green-400 hover:text-green-200 font-medium px-3 py-1 bg-green-900 rounded">
                  Configure
                </a>
              {% endif %}
              <a href="{{ path('device_calibration', { id: device.id }) }}" 
                 class="text-sm text-purple-400 hover:text-purple-200 font-medium px-3 py-1 bg-purple-900 rounded">
                Calibrate
              </a>
              {% set userHasAccess = false %}
              {% for access in accessRecords %}
                {% if access.device.id == device.id %}
                  {% set userHasAccess = true %}
                  <a href="{{ path('unlink_device', { id: device.id }) }}" 
                     class="text-sm text-red-400 hover:text-red-200 font-medium px-3 py-1 bg-red-900 rounded">
                    Unlink
                  </a>
                {% endif %}
              {% endfor %}
              {% if not userHasAccess %}
                <button onclick="connectToDevice('{{ device.macAddress }}')" 
                        class="text-sm text-blue-400 hover:text-blue-200 font-medium px-3 py-1 bg-blue-900 rounded">
                  Connect
                </button>
              {% endif %}
            </div>
          </div>
        {% endfor %}
      </div>
    {% else %}
      <div class="bg-gray-800 rounded-lg p-6 text-center">
        <p class="text-gray-400 mb-4">No devices found.</p>
        <p class="text-sm text-gray-500">Connect to an ESP32 device to get started, or contact support for device registration.</p>
      </div>
    {% endif %}
  </div>

  <!-- Vehicle List -->
  <div id="vehicle-section">
    <h2 class="text-xl font-semibold text-white mb-4">Your Vehicles</h2>
    {% if vehicles is not empty %}
      <div class="bg-gray-800 rounded-lg divide-y divide-gray-700" id="vehicle-list">
        {% for vehicle in vehicles %}
          <div class="flex items-center justify-between p-4" data-vehicle-id="{{ vehicle.id }}">
            <div class="flex-1">
              <div class="flex items-center space-x-4">
                <span class="text-gray-100 font-medium">{{ vehicle }}</span>
                <span class="text-sm text-gray-400">({{ vehicle.nickname ?: 'No nickname' }})</span>
                {% if connectedMap[vehicle.id] is defined and connectedMap[vehicle.id] %}
                  <span class="text-xs text-green-400 bg-green-900 px-2 py-1 rounded">Connected</span>
                {% endif %}
                {% if vehicle.createdBy != app.user %}
                  <span class="text-xs text-orange-400 bg-orange-900 px-2 py-1 rounded">Shared</span>
                {% endif %}
              </div>
              <div class="text-xs text-gray-500 mt-1">
                {{ vehicle.devices|length }} device(s) assigned
                {% if vehicle.lastSeen %}
                  | Last seen: {{ vehicle.lastSeen|date('M j, Y g:i A') }}
                {% endif %}
                {% if vehicle.createdBy != app.user %}
                  | Owner: {{ vehicle.createdBy ? vehicle.createdBy.fullName : 'Unknown' }}
                {% endif %}
                {% if vehicle.devices|length > 0 %}
                  | <a href="{{ path('device_calibration_history', { id: vehicle.devices[0].id }) }}" class="text-purple-400 hover:text-purple-200">View Calibrations</a>
                {% endif %}
              </div>
            </div>
            <div class="flex space-x-2">
              {% if vehicle.createdBy == app.user %}
                <a href="{{ path('device_vehicle_edit', { id: vehicle.id }) }}"
                   class="text-sm text-blue-400 hover:text-blue-200 font-medium px-3 py-1 bg-blue-900 rounded">
                  Manage
                </a>
              {% else %}
                <span class="text-sm text-gray-400 px-3 py-1 bg-gray-700 rounded">
                  View Only
                </span>
              {% endif %}
              <span class="drag-handle cursor-move text-gray-400 hover:text-gray-200 px-2">⋮⋮</span>
            </div>
          </div>
        {% endfor %}
      </div>
    {% else %}
      <div class="bg-gray-800 rounded-lg p-6 text-center">
        <p class="text-gray-400 mb-4">No vehicles found.</p>
        <p class="text-sm text-gray-500">Configure a device to create your first vehicle, or connect to an ESP32 to see shared vehicles.</p>
      </div>
    {% endif %}
  </div>

  {# Connected vehicles are integrated into the main vehicle list above with badges #}
</div>

<script>
let sensorData = new Map();
let websocket = null;
let isOnline = navigator.onLine;

function detectModeAndConnect() {
  // Try ESP32 first (AP mode)
  testESP32Connection()
    .then(available => {
      if (available) {
        connectToESP32();
      } else if (isOnline) {
        // Online mode - could scan for ESP32s on network here
        updateStatus('online');
      } else {
        updateStatus('offline');
      }
    });
}

async function testESP32Connection() {
  try {
    const response = await fetch('http://192.168.4.1/status', { 
      method: 'GET',
      signal: AbortSignal.timeout(2000) // 2 second timeout
    });
    return response.ok;
  } catch {
    return false;
  }
}

function connectToESP32() {
  updateStatus('ap');
  
  // Connect WebSocket
  websocket = new WebSocket('ws://192.168.4.1/ws');
  
  websocket.onopen = () => {
    console.log('Connected to ESP32');
    updateStatus('connected');
  };
  
  websocket.onmessage = (event) => {
    const data = JSON.parse(event.data);
    sensorData.set(data.mac_address, data);
    updateTable();
  };
  
  websocket.onclose = () => {
    console.log('ESP32 disconnected');
    updateStatus('disconnected');
    // Retry connection
    setTimeout(connectToESP32, 3000);
  };
}

function connectToDevice(macAddress) {
  // This function will be called when user clicks "Connect" on a registered device
  // You can implement specific connection logic for known devices here
  console.log('Attempting to connect to device:', macAddress);
  
  // For now, just try the standard ESP32 connection
  detectModeAndConnect();
}

function updateStatus(mode = 'loading') {
  const statusBar = document.getElementById('status-bar');
  const statusText = document.getElementById('status-text');
  
  switch(mode) {
    case 'connected':
      statusBar.className = 'bg-green-600 p-3 rounded mb-6';
      statusText.textContent = '✅ Connected to ESP32';
      break;
    case 'ap':
      statusBar.className = 'bg-yellow-600 p-3 rounded mb-6';
      statusText.textContent = '📡 AP Mode - Connecting...';
      break;
    case 'online':
      statusBar.className = 'bg-blue-600 p-3 rounded mb-6';
      statusText.textContent = '🌐 Online Mode';
      break;
    case 'offline':
      statusBar.className = 'bg-red-600 p-3 rounded mb-6';
      statusText.textContent = '📴 Offline';
      break;
    case 'disconnected':
      statusBar.className = 'bg-red-600 p-3 rounded mb-6';
      statusText.textContent = '❌ Disconnected - Retrying...';
      break;
    default:
      statusBar.className = 'bg-gray-700 p-3 rounded mb-6';
      statusText.textContent = '⏳ Loading...';
  }
}

function updateTable() {
  const tbody = document.getElementById('sensor-data');
  const totalWeight = document.getElementById('total-weight');
  const deviceCount = document.getElementById('device-count');
  
  if (sensorData.size === 0) return;
  
  let html = '';
  let total = 0;
  
  sensorData.forEach((data, mac) => {
    const weight = parseFloat(data.weight) || 0;
    total += weight;
    
    html += `
      <tr style="border-bottom: 1px solid #374151;">
        <td style="padding: 15px; color: #e2e8f0;">${data.device_name || mac.slice(-4)}</td>
        <td style="padding: 15px; text-align: right; color: #f1f5f9; font-weight: bold;">${weight.toFixed(1)}</td>
        <td style="padding: 15px; text-align: right; color: #e2e8f0;">${data.main_air_pressure}</td>
        <td style="padding: 15px; text-align: right; color: #e2e8f0;">${data.temperature}</td>
        <td style="padding: 15px; color: #22c55e;">● Online</td>
      </tr>
    `;
  });
  
  tbody.innerHTML = html;
  totalWeight.textContent = `${total.toFixed(1)} lbs`;
  deviceCount.textContent = sensorData.size;
}

// Vehicle drag and drop functionality
function initVehicleSorting() {
  const vehicleList = document.getElementById('vehicle-list');
  if (!vehicleList) return;

  let draggedElement = null;

  vehicleList.addEventListener('dragstart', (e) => {
    if (e.target.classList.contains('drag-handle') || e.target.closest('.drag-handle')) {
      draggedElement = e.target.closest('[data-vehicle-id]');
      draggedElement.style.opacity = '0.5';
    }
  });

  vehicleList.addEventListener('dragend', (e) => {
    if (draggedElement) {
      draggedElement.style.opacity = '';
      draggedElement = null;
    }
  });

  vehicleList.addEventListener('dragover', (e) => {
    e.preventDefault();
  });

  vehicleList.addEventListener('drop', (e) => {
    e.preventDefault();
    if (!draggedElement) return;

    const target = e.target.closest('[data-vehicle-id]');
    if (target && target !== draggedElement) {
      const rect = target.getBoundingClientRect();
      const midpoint = rect.top + rect.height / 2;
      
      if (e.clientY < midpoint) {
        target.parentNode.insertBefore(draggedElement, target);
      } else {
        target.parentNode.insertBefore(draggedElement, target.nextSibling);
      }
      
      saveVehicleOrder();
    }
  });

  // Make drag handles draggable
  document.querySelectorAll('.drag-handle').forEach(handle => {
    handle.draggable = true;
  });
}

function saveVehicleOrder() {
  const vehicleElements = document.querySelectorAll('[data-vehicle-id]');
  const order = Array.from(vehicleElements).map(el => parseInt(el.dataset.vehicleId));
  
  fetch('{{ path('vehicle_sort_user') }}', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ order: order })
  });
}

// Initialize everything when page loads
document.addEventListener('DOMContentLoaded', () => {
  detectModeAndConnect();
  updateStatus();
  initVehicleSorting();
  startLiveDataPolling(); // New: Start polling for live data
  
  // Listen for network changes
  window.addEventListener('online', () => {
    isOnline = true;
    detectModeAndConnect();
    startLiveDataPolling(); // Restart polling when back online
  });
  
  window.addEventListener('offline', () => {
    isOnline = false;
    updateStatus();
    stopLiveDataPolling(); // Stop polling when offline
  });
});

// Live data polling variables
let liveDataInterval = null;

function startLiveDataPolling() {
  // Clear any existing interval
  stopLiveDataPolling();
  
  // Start polling every 30 seconds
  liveDataInterval = setInterval(fetchLiveData, 30000);
  
  // Fetch immediately on start
  fetchLiveData();
}

function stopLiveDataPolling() {
  if (liveDataInterval) {
    clearInterval(liveDataInterval);
    liveDataInterval = null;
  }
}

function fetchLiveData() {
  fetch('/calibration/api/devices/live-data')
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to fetch live data');
      }
      return response.json();
    })
    .then(data => {
      updateLiveTable(data);
      updateStatus('connected'); // Show we're getting live data
    })
    .catch(error => {
      console.error('Error fetching live data:', error);
      updateStatus('offline');
    });
}

function updateLiveTable(data) {
  const tbody = document.getElementById('sensor-data');
  const totalWeight = document.getElementById('total-weight');
  const deviceCount = document.getElementById('device-count');
  
  if (!data.devices || data.devices.length === 0) {
    tbody.innerHTML = '<tr><td colspan="5" class="p-6 text-center text-gray-400">📡 No devices with recent data...</td></tr>';
    totalWeight.textContent = '0.0 lbs';
    deviceCount.textContent = '0';
    return;
  }
  
  let html = '';
  
  data.devices.forEach(device => {
    const weight = parseFloat(device.weight) || 0;
    
    // Determine status color based on last_seen
    let statusColor = '#ef4444'; // Default red for old data
    let statusText = `● ${device.last_seen}`;
    
    if (device.last_seen === 'online') {
      statusColor = '#22c55e'; // Green for online
      statusText = '● Online';
    } else if (device.last_seen.includes('minute')) {
      const minutes = parseInt(device.last_seen.match(/\d+/)?.[0] || '999');
      if (minutes <= 10) {
        statusColor = '#22c55e'; // Green for < 10 minutes
      } else if (minutes <= 30) {
        statusColor = '#f59e0b'; // Orange for 10-30 minutes
      }
      statusText = `● ${device.last_seen}`;
    } else if (device.last_seen.includes('hour')) {
      statusColor = '#f59e0b'; // Orange for hours
      statusText = `● ${device.last_seen}`;
    }
    
    html += `
      <tr style="border-bottom: 1px solid #374151;">
        <td style="padding: 15px; color: #e2e8f0;">
          ${device.device_name}
          ${device.vehicle ? '<br><span style="font-size: 12px; color: #9ca3af;">' + device.vehicle + '</span>' : ''}
        </td>
        <td style="padding: 15px; text-align: right; color: #f1f5f9; font-weight: bold;">${weight.toFixed(1)}</td>
        <td style="padding: 15px; text-align: right; color: #e2e8f0;">${device.main_air_pressure}</td>
        <td style="padding: 15px; text-align: right; color: #e2e8f0;">${device.temperature}</td>
        <td style="padding: 15px; color: ${statusColor};">${statusText}</td>
      </tr>
    `;
  });
  
  tbody.innerHTML = html;
  totalWeight.textContent = `${data.total_weight.toFixed(1)} lbs`;
  deviceCount.textContent = data.device_count;
}
</script>
{% endblock %}