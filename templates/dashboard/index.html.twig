{# templates/dashboard/index.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Dashboard{% endblock %}

{% block body %}
<div class="min-h-screen bg-gray-900 text-gray-100 p-6">
  <h1 class="text-2xl font-bold text-green-400 mb-6">Air Scales Dashboard</h1>

  <!-- Status Bar -->
  <div id="status-bar" class="bg-gray-700 p-3 rounded mb-6">
    <span id="status-text">Loading...</span>
  </div>

  <!-- Live Sensor Data -->
  <div class="bg-gray-800 rounded-lg overflow-hidden mb-8">
    <table id="sensor-table" class="w-full text-sm">
      <thead class="bg-gray-700">
        <tr>
          <th class="p-3 text-left text-gray-200">Device</th>
          <th class="p-3 text-right text-gray-200">Weight (lbs)</th>
          <th class="p-3 text-right text-gray-200">Pressure (psi)</th>
          <th class="p-3 text-right text-gray-200">Temp (¬∞F)</th>
          <th class="p-3 text-left text-gray-200">Status</th>
        </tr>
      </thead>
      <tbody id="sensor-data">
        <tr>
          <td colspan="5" class="p-6 text-center text-gray-400">üì° Connecting to devices...</td>
        </tr>
      </tbody>
      <tfoot class="bg-gray-700">
        <tr>
          <td class="p-3 font-bold text-gray-100">TOTAL</td>
          <td id="total-weight" class="p-3 text-right font-bold text-green-400">0.0 lbs</td>
          <td colspan="3" class="p-3 text-gray-400">
            <span id="device-count">0</span> devices
          </td>
        </tr>
      </tfoot>
    </table>
  </div>

  <!-- Vehicle List -->
  <div id="vehicle-section">
    <h2 class="text-xl font-semibold text-white mb-4">Vehicles</h2>
    {% if vehicles is not empty %}
      <div class="bg-gray-800 rounded-lg divide-y divide-gray-700">
        {% for vehicle in vehicles %}
          <div class="flex items-center justify-between p-4">
            <div>
              <span class="text-gray-100 font-medium">{{ vehicle.year }} {{ vehicle.make }} {{ vehicle.model }}</span>
              <span class="text-sm text-gray-400 ml-2">({{ vehicle.nickname ?: 'No nickname' }})</span>
            </div>
            <a href="{{ path('device_vehicle_edit', { id: vehicle.id }) }}"
               class="text-sm text-blue-400 hover:text-blue-200 font-medium">
              Edit
            </a>
          </div>
        {% endfor %}
      </div>
    {% else %}
      <p class="text-gray-400">No vehicles configured.</p>
    {% endif %}
  </div>
</div>

<script>
let sensorData = new Map();
let websocket = null;
let isOnline = navigator.onLine;

// Initialize when page loads
document.addEventListener('DOMContentLoaded', () => {
  detectModeAndConnect();
  updateStatus();
  
  // Listen for network changes
  window.addEventListener('online', () => {
    isOnline = true;
    detectModeAndConnect();
  });
  
  window.addEventListener('offline', () => {
    isOnline = false;
    updateStatus();
  });
});

function detectModeAndConnect() {
  // Try ESP32 first (AP mode)
  testESP32Connection()
    .then(available => {
      if (available) {
        connectToESP32();
      } else if (isOnline) {
        // Online mode - could scan for ESP32s on network here
        updateStatus('online');
      } else {
        updateStatus('offline');
      }
    });
}

async function testESP32Connection() {
  try {
    const response = await fetch('http://192.168.4.1/status', { 
      method: 'GET',
      signal: AbortSignal.timeout(2000) // 2 second timeout
    });
    return response.ok;
  } catch {
    return false;
  }
}

function connectToESP32() {
  updateStatus('ap');
  
  // Connect WebSocket
  websocket = new WebSocket('ws://192.168.4.1/ws');
  
  websocket.onopen = () => {
    console.log('Connected to ESP32');
    updateStatus('connected');
  };
  
  websocket.onmessage = (event) => {
    const data = JSON.parse(event.data);
    sensorData.set(data.mac_address, data);
    updateTable();
  };
  
  websocket.onclose = () => {
    console.log('ESP32 disconnected');
    updateStatus('disconnected');
    // Retry connection
    setTimeout(connectToESP32, 3000);
  };
}

function updateStatus(mode = 'loading') {
  const statusBar = document.getElementById('status-bar');
  const statusText = document.getElementById('status-text');
  
  switch(mode) {
    case 'connected':
      statusBar.style.background = '#22c55e';
      statusText.textContent = '‚úÖ Connected to ESP32';
      break;
    case 'ap':
      statusBar.style.background = '#f59e0b';
      statusText.textContent = 'üì° AP Mode - Connecting...';
      break;
    case 'online':
      statusBar.style.background = '#3b82f6';
      statusText.textContent = 'üåê Online Mode';
      break;
    case 'offline':
      statusBar.style.background = '#ef4444';
      statusText.textContent = 'üì¥ Offline';
      break;
    case 'disconnected':
      statusBar.style.background = '#ef4444';
      statusText.textContent = '‚ùå Disconnected - Retrying...';
      break;
    default:
      statusBar.style.background = '#374151';
      statusText.textContent = '‚è≥ Loading...';
  }
}

function updateTable() {
  const tbody = document.getElementById('sensor-data');
  const totalWeight = document.getElementById('total-weight');
  const deviceCount = document.getElementById('device-count');
  
  if (sensorData.size === 0) return;
  
  let html = '';
  let total = 0;
  
  sensorData.forEach((data, mac) => {
    const weight = parseFloat(data.weight) || 0;
    total += weight;
    
    html += `
      <tr style="border-bottom: 1px solid #374151;">
        <td style="padding: 15px; color: #e2e8f0;">${data.device_name || mac.slice(-4)}</td>
        <td style="padding: 15px; text-align: right; color: #f1f5f9; font-weight: bold;">${weight.toFixed(1)}</td>
        <td style="padding: 15px; text-align: right; color: #e2e8f0;">${data.main_air_pressure}</td>
        <td style="padding: 15px; text-align: right; color: #e2e8f0;">${data.temperature}</td>
        <td style="padding: 15px; color: #22c55e;">‚óè Online</td>
      </tr>
    `;
  });
  
  tbody.innerHTML = html;
  totalWeight.textContent = `${total.toFixed(1)} lbs`;
  deviceCount.textContent = sensorData.size;
}
</script>
{% endblock %}