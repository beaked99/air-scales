{# templates/dashboard/index.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Dashboard{% endblock %}

{% block body %}
<div style="padding: 20px; background: #0f172a; color: #e2e8f0; min-height: 100vh;">
  <h1 style="color: #22c55e; margin-bottom: 20px;">Air Scales Dashboard</h1>
  
  <!-- Status Bar -->
  <div id="status-bar" style="background: #374151; padding: 10px; border-radius: 6px; margin-bottom: 20px;">
    <span id="status-text">Loading...</span>
  </div>
  
  <!-- Live Sensor Data -->
  <div style="background: #1e293b; border-radius: 8px; overflow: hidden;">
    <table id="sensor-table" style="width: 100%; border-collapse: collapse;">
      <thead style="background: #374151;">
        <tr>
          <th style="padding: 15px; color: #f1f5f9;">Device</th>
          <th style="padding: 15px; color: #f1f5f9; text-align: right;">Weight (lbs)</th>
          <th style="padding: 15px; color: #f1f5f9; text-align: right;">Pressure (psi)</th>
          <th style="padding: 15px; color: #f1f5f9; text-align: right;">Temp (¬∞F)</th>
          <th style="padding: 15px; color: #f1f5f9;">Status</th>
        </tr>
      </thead>
      <tbody id="sensor-data">
        <tr>
          <td colspan="5" style="padding: 40px; text-align: center; color: #94a3b8;">
            üì° Connecting to devices...
          </td>
        </tr>
      </tbody>
      <tfoot style="background: #334155;">
        <tr>
          <td style="padding: 15px; font-weight: bold; color: #f1f5f9;">TOTAL</td>
          <td id="total-weight" style="padding: 15px; text-align: right; font-weight: bold; color: #22c55e;">0.0 lbs</td>
          <td colspan="3" style="padding: 15px; color: #94a3b8;">
            <span id="device-count">0</span> devices
          </td>
        </tr>
      </tfoot>
    </table>
  </div>
  
  <!-- Vehicle List (only show if online) -->
  <div id="vehicle-section" style="margin-top: 30px;">
    <h2 style="color: #f8fafc;">Vehicles</h2>
    {% if vehicles is not empty %}
      <div style="background: #1e293b; border-radius: 8px; padding: 20px;">
        {% for vehicle in vehicles %}
          <div style="padding: 10px; border-bottom: 1px solid #374151; display: flex; justify-content: space-between;">
            <span style="color: #e2e8f0;">{{ vehicle.year }} {{ vehicle.make }} {{ vehicle.model }}</span>
            <span style="color: #94a3b8;">{{ vehicle.nickname ?: 'No nickname' }}</span>
          </div>
        {% endfor %}
      </div>
    {% else %}
      <p style="color: #94a3b8;">No vehicles configured.</p>
    {% endif %}
  </div>
</div>

<script>
let sensorData = new Map();
let websocket = null;
let isOnline = navigator.onLine;

// Initialize when page loads
document.addEventListener('DOMContentLoaded', () => {
  detectModeAndConnect();
  updateStatus();
  
  // Listen for network changes
  window.addEventListener('online', () => {
    isOnline = true;
    detectModeAndConnect();
  });
  
  window.addEventListener('offline', () => {
    isOnline = false;
    updateStatus();
  });
});

function detectModeAndConnect() {
  // Try ESP32 first (AP mode)
  testESP32Connection()
    .then(available => {
      if (available) {
        connectToESP32();
      } else if (isOnline) {
        // Online mode - could scan for ESP32s on network here
        updateStatus('online');
      } else {
        updateStatus('offline');
      }
    });
}

async function testESP32Connection() {
  try {
    const response = await fetch('http://192.168.4.1/status', { 
      method: 'GET',
      signal: AbortSignal.timeout(2000) // 2 second timeout
    });
    return response.ok;
  } catch {
    return false;
  }
}

function connectToESP32() {
  updateStatus('ap');
  
  // Connect WebSocket
  websocket = new WebSocket('ws://192.168.4.1/ws');
  
  websocket.onopen = () => {
    console.log('Connected to ESP32');
    updateStatus('connected');
  };
  
  websocket.onmessage = (event) => {
    const data = JSON.parse(event.data);
    sensorData.set(data.mac_address, data);
    updateTable();
  };
  
  websocket.onclose = () => {
    console.log('ESP32 disconnected');
    updateStatus('disconnected');
    // Retry connection
    setTimeout(connectToESP32, 3000);
  };
}

function updateStatus(mode = 'loading') {
  const statusBar = document.getElementById('status-bar');
  const statusText = document.getElementById('status-text');
  
  switch(mode) {
    case 'connected':
      statusBar.style.background = '#22c55e';
      statusText.textContent = '‚úÖ Connected to ESP32';
      break;
    case 'ap':
      statusBar.style.background = '#f59e0b';
      statusText.textContent = 'üì° AP Mode - Connecting...';
      break;
    case 'online':
      statusBar.style.background = '#3b82f6';
      statusText.textContent = 'üåê Online Mode';
      break;
    case 'offline':
      statusBar.style.background = '#ef4444';
      statusText.textContent = 'üì¥ Offline';
      break;
    case 'disconnected':
      statusBar.style.background = '#ef4444';
      statusText.textContent = '‚ùå Disconnected - Retrying...';
      break;
    default:
      statusBar.style.background = '#374151';
      statusText.textContent = '‚è≥ Loading...';
  }
}

function updateTable() {
  const tbody = document.getElementById('sensor-data');
  const totalWeight = document.getElementById('total-weight');
  const deviceCount = document.getElementById('device-count');
  
  if (sensorData.size === 0) return;
  
  let html = '';
  let total = 0;
  
  sensorData.forEach((data, mac) => {
    const weight = parseFloat(data.weight) || 0;
    total += weight;
    
    html += `
      <tr style="border-bottom: 1px solid #374151;">
        <td style="padding: 15px; color: #e2e8f0;">${data.device_name || mac.slice(-4)}</td>
        <td style="padding: 15px; text-align: right; color: #f1f5f9; font-weight: bold;">${weight.toFixed(1)}</td>
        <td style="padding: 15px; text-align: right; color: #e2e8f0;">${data.main_air_pressure}</td>
        <td style="padding: 15px; text-align: right; color: #e2e8f0;">${data.temperature}</td>
        <td style="padding: 15px; color: #22c55e;">‚óè Online</td>
      </tr>
    `;
  });
  
  tbody.innerHTML = html;
  totalWeight.textContent = `${total.toFixed(1)} lbs`;
  deviceCount.textContent = sensorData.size;
}
</script>
{% endblock %}