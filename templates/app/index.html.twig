<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#1f7a1f" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <link rel="manifest" href="/app/manifest.webmanifest" />
    <link rel="icon" href="/app/icon-192.png" />
    <link rel="apple-touch-icon" href="/app/icon-192.png" />
    <title>Air Scales Online App</title>
    <style>
      body {
        font-family: sans-serif;
        margin: 0;
        padding: 1rem;
        background: #f8f8f8;
        text-align: center;
      }
      #status {
        margin: 1rem 0;
        font-weight: bold;
      }
      #chart {
        width: 100%;
        max-width: 600px;
        margin: 2rem auto;
      }
    </style>
  </head>
  <body>
    <img src="/app/icon-192.png" alt="Air Scales Logo" width="100" />
    <h1>Air Scales</h1>
    <div id="status">Waiting for Air Scales Controller...</div>
    <canvas id="chart" height="300"></canvas>

<script>
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker
      .register('/app/sw.js')
      .then(() => console.log('[PWA] Service worker registered'))
      .catch(console.error);
  }

  // ðŸ”Œ Redirect to ESP32 fallback if offline
  function tryESP32Fallback() {
    // Try to reach the ESP32 directly
    fetch('http://192.168.4.1/app/index.html', { method: 'HEAD', mode: 'no-cors' })
      .then(() => {
        console.log('[PWA] ESP32 found at 192.168.4.1 â€” redirecting');
        window.location.href = 'http://192.168.4.1/app/';
      })
      .catch(err => {
        console.warn('[PWA] ESP32 not reachable:', err);
      });
  }

  // Run once on page load if offline
  window.addEventListener('load', () => {
    if (!navigator.onLine) {
      console.log('[PWA] Offline â€” trying ESP32...');
      tryESP32Fallback();
    }
  });

  // Also trigger when network goes down
  window.addEventListener('offline', () => {
    console.log('[PWA] Browser went offline â€” trying ESP32...');
    tryESP32Fallback();
  });
</script>


    <script>
      let ws;
      let reconnectTimer = null;
      let chart;
      let labels = [], weights = [];

      function connectToESP32() {
        const wsURL = location.hostname.startsWith('192.') ? 'ws://' + location.hostname + '/ws' : 'ws://192.168.4.1/ws';
        document.getElementById('status').textContent = 'Connecting to Air Scales Controller...';

        try {
          ws = new WebSocket(wsURL);

          ws.onopen = () => {
            document.getElementById('status').textContent = 'Connected to Air Scales Controller';
          };

          ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            const time = new Date().toLocaleTimeString();
            labels.push(time);
            weights.push(data.weight);
            if (labels.length > 20) {
              labels.shift();
              weights.shift();
            }
            chart.update();
          };

          ws.onerror = () => {
            document.getElementById('status').textContent = 'WebSocket error';
          };

          ws.onclose = () => {
            document.getElementById('status').textContent = 'Air Scales Controller disconnected';
            if (!reconnectTimer) reconnectTimer = setTimeout(connectToESP32, 5000);
          };
        } catch (err) {
          console.error(err);
        }
      }

      window.addEventListener('load', () => {
        const ctx = document.getElementById('chart').getContext('2d');
        chart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: labels,
            datasets: [
              {
                label: 'Weight (kg)',
                data: weights,
                fill: false,
                borderColor: 'green',
                tension: 0.1
              }
            ]
          },
          options: {
            responsive: true,
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });
        connectToESP32();
      });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  </body>
</html>
